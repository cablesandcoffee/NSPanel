# Set some variables for convenience
substitutions:
  node_name: nsp-kitchen
  device_name: NSP Kitchen


external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  use_address: nsp-kitchen.local

# Enable logging
logger:
  level: DEBUG
  logs:
    mqtt.component: NONE
    mqtt.client: NONE
# Enable wireless updates
ota:

mqtt:
  broker: 192.168.32.2
  username: openhabian
  password: Superjanne!1
  id: mqtt_client
  discovery: false
  will_message:
#  log_topic: null
  
time:
  - platform: sntp
    id: sntp_time
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - lambda: |-
              auto time_text = id(sntp_time).now().strftime("%H:%M");
              id(disp1).set_component_text("t_time", time_text.c_str());

#  - platform: sntp
#    on_time:
#     # Every 5 minutes
#      - seconds: 0
#        minutes: /2
#       then:
#          - lambda: 'id(disp1)->upload_tft();'

globals:
   - id: device
     type: std::string
     restore_value: no
     initial_value: '"Kitchen"'
     #Set initial value to the room where NSPanel is situated. Used in clickbutton rule to update on no touch resetting to main page.
     
   - id: currentroom
     #type: char
     type: std::string
     restore_value: no
     initial_value: '"Kitchen"'
     
   - id: mode
     #type: char
     type: std::string
     restore_value: no
     initial_value: '"All Lights"'

   - id: event
     type: std::string
     restore_value: no
     initial_value: '""'
     
     
   - id: ceilingmax
     type: int
     restore_value: no
     initial_value: '99'
     
   - id: tablemax
     type: int
     restore_value: no
     initial_value: '99'
     
   - id: soundaverage
     type: int
     restore_value: no
     initial_value: '30'

script:
  - id: update_room
    then:
        - lambda: |-
        
            if (id(currentroom) == "Kitchen") {
              if (id(mode) == "Sound" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_kitchen_speaker_volume).state);
              }
              if (id(oh_kitchen_ceiling).state == 0 and id(oh_kitchen_table).state == 0) { 
                id(disp1).set_component_value("b_ceiling", 0); 
                id(disp1).set_component_value("home.n_ceiling", 0);

              }
              else {
                int arr[] = { id(oh_kitchen_ceiling).state, id(oh_kitchen_table).state };
                
                  int i;
                  int n = 2; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(ceilingmax) = max;
                    id(disp1).set_component_value("b_ceiling", 1);
                    id(disp1).set_component_value("home.n_ceiling", id(ceilingmax));
              }
              
              if (id(oh_kitchen_ledstrip).state == 0) { 
                id(disp1).set_component_value("home.b_table", 0); 
                id(disp1).set_component_value("home.n_table", 0);

              }
              else {
                int arr[] = { id(oh_kitchen_ledstrip).state };
                
                  int i;
                  int n = 1; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(tablemax) = max;
                    id(disp1).set_component_value("home.b_table", 1);
                    id(disp1).set_component_value("home.n_table", id(tablemax));
              }
              
            }
            else if (id(currentroom) == "Livingroom") {
              if (id(mode) == "Sound" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_livingroom_speaker_volume).state);
              }
              if (id(oh_livingroom_lady).state == 0 and id(oh_livingroom_window).state == 0 and id(oh_livingroom_globe).state == 0) { 
                id(disp1).set_component_value("home.b_table", 0); 
                id(disp1).set_component_value("home.n_table", 0);

              }
              else {
                int arr[] = { id(oh_livingroom_lady).state, id(oh_livingroom_window).state, id(oh_livingroom_globe).state };
                
                  int i;
                  int n = 3;
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(tablemax) = max;
                    id(disp1).set_component_value("home.b_table", 1);
                    id(disp1).set_component_value("home.n_table", id(tablemax));
              }
              //No ceiling lights in this room. Zeroising ceiling symbol
              id(disp1).set_component_value("b_ceiling", 0); 
              id(disp1).set_component_value("home.n_ceiling", 0);
              
            }
            else if (id(currentroom) == "Bedroom") {
              if (id(mode) == "Sound" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_bedroom_speaker_volume).state);
              }
              if (id(oh_bedroom_ceiling).state == 0) { 
                id(disp1).set_component_value("b_ceiling", 0); 
                id(disp1).set_component_value("home.n_ceiling", 0);

              }
              else {
                int arr[] = { id(oh_bedroom_ceiling).state };
                
                  int i;
                  int n = 1; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(ceilingmax) = max;
                    id(disp1).set_component_value("b_ceiling", 1);
                    id(disp1).set_component_value("home.n_ceiling", id(ceilingmax));
              }
              
              if (id(oh_bedroom_ledstrip).state == 0 and id(oh_bedroom_window).state == 0 and id(oh_bedroom_moon).state == 0 and id(oh_bedroom_mirror).state == 0) { 
                id(disp1).set_component_value("home.b_table", 0); 
                id(disp1).set_component_value("home.n_table", 0);

              }
              else {
                int arr[] = { id(oh_bedroom_ledstrip).state, id(oh_bedroom_window).state, id(oh_bedroom_moon).state, id(oh_bedroom_mirror).state };
                
                  int i;
                  int n = 4;
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(tablemax) = max;
                    id(disp1).set_component_value("home.b_table", 1);
                    id(disp1).set_component_value("home.n_table", id(tablemax));
              }
              
            }
            else if (id(currentroom) == "Entryway") {
              if (id(mode) == "Sound" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_entryway_speaker_volume).state);
              }
              if (id(oh_entryway_ceiling).state == 0) { 
                id(disp1).set_component_value("b_ceiling", 0); 
                id(disp1).set_component_value("home.n_ceiling", 0);

              }
              else {
                int arr[] = { id(oh_entryway_ceiling).state };
                
                  int i;
                  int n = 1; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(ceilingmax) = max;
                    id(disp1).set_component_value("b_ceiling", 1);
                    id(disp1).set_component_value("home.n_ceiling", id(ceilingmax));
              }
              //No table lights in this room. Zeroising table symbol
              id(disp1).set_component_value("home.b_table", 0); 
              id(disp1).set_component_value("home.n_table", 0);
        
            }
            else if (id(currentroom) == "Bathroom") {
              if (id(mode) == "Sound" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_bathroom_speaker_volume).state);
              }
              if (id(oh_bathroom_ceiling).state == 0) { 
                id(disp1).set_component_value("b_ceiling", 0); 
                id(disp1).set_component_value("home.n_ceiling", 0);

              }
              else {
                int arr[] = { id(oh_bathroom_ceiling).state };
                
                  int i;
                  int n = 1; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(ceilingmax) = max;
                    id(disp1).set_component_value("b_ceiling", 1);
                    id(disp1).set_component_value("home.n_ceiling", id(ceilingmax));
              }
              if (id(oh_bathroom_mirror).state == 0) { 
                id(disp1).set_component_value("home.b_table", 0); 
                id(disp1).set_component_value("home.n_table", 0);

              }
              else {
                int arr[] = { id(oh_bathroom_mirror).state };
                
                  int i;
                  int n = 1; 
                  // Initialize maximum element
                  int max = arr[0];
               
                  // Traverse array elements
                  // from second and compare
                  // every element with current max
                  for (i = 1; i < n; i++)
                      if (arr[i] > max)
                          max = arr[i];

                    id(tablemax) = max;
                    id(disp1).set_component_value("home.b_table", 1);
                    id(disp1).set_component_value("home.n_table", id(tablemax));
              }
              
            }
            if (id(relay_1).state == false or id(relay_2).state == false) {
              if (id(currentroom) == id(device).c_str()) {
                id(disp1).show_component("b_power");
              }
              else {
                id(disp1).hide_component("b_power");
              }
            }
            
            
  - id: update_mode
    then:
        - lambda: |-
            if (id(mode) == "All Lights") {
            
              id(disp1).set_component_picc("home.bright", 1);
              id(disp1).set_component_picc("home.kelvin", 1);
              id(disp1).set_component_value("home.n_bright", id(oh_all_brightness).state);
              id(disp1).set_component_value("home.n_kelvin", id(oh_all_kelvin).state);
            }
            else if (id(mode) == "Sound") {
              id(disp1).set_component_picc("home.bright", 2);
              id(disp1).set_component_picc("home.kelvin", 2);
              id(disp1).set_component_value("home.n_kelvin", id(soundaverage));

              if (id(currentroom) == "Kitchen" ) {
                id(disp1).set_component_value("home.n_bright", id(oh_kitchen_speaker_volume).state);
              }
              if (id(currentroom) == "Livingroom" ) {
              }
              if (id(currentroom) == "Bedroom" ) {
              }
              if (id(currentroom) == "Entryway" ) {
              }
              if (id(currentroom) == "Bathroom" ) {
              }
            }
  - id: speaker_average
    mode: restart
    then:
        - lambda: |-
        
            id(soundaverage) = (id(oh_kitchen_speaker_volume).state + id(oh_livingroom_speaker_volume).state + id(oh_bedroom_speaker_volume).state + 
            id(oh_entryway_speaker_volume).state + id(oh_bathroom_speaker_volume).state) / 5;
            if (id(mode) == "Sound") {
              id(disp1).set_component_value("home.n_kelvin", id(soundaverage));
            }
# A reboot button is always useful
#button:
#  - platform: restart
#    internal: true
#    name: Restart $device_name

# Define some inputs
binary_sensor:
  - platform: gpio
    internal: true
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
     - switch.toggle: relay_1

  - platform: gpio
    internal: true
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2

  - platform: nextion
    internal: true
    name: $device_name TFT Button
    page_id: 3
    component_id: 3
    on_press:
      then:
        - lambda: 'id(disp1)->upload_tft();'
        
  - platform: nextion
    internal: true
    name: $device_name Click Screensaver
    page_id: 3
    component_id: 7
    on_press:
      then:
        - lambda: |-
            id(disp1).set_component_text("home.room", id(device).c_str());
            id(currentroom) = id(device).c_str();
            id(disp1).set_component_text("home.mode", "All Lights");
            id(mode) = "All Lights";

        - script.execute: update_room
        - script.execute: update_mode
        
  - platform: nextion
    internal: true
    name: $device_name Click Vacuum
    page_id: 3
    component_id: 8
    on_release:
      then:
        - lambda: |-
            if (id(currentroom) == "Kitchen") {
              id(mqtt_client).publish("oh/vacuum/kitchen", "ON");
            }
            else if (id(currentroom) == "Livingroom") {
              id(mqtt_client).publish("oh/vacuum/livingroom", "ON");
            }
            else if (id(currentroom) == "Bedroom") {
              id(mqtt_client).publish("oh/vacuum/bedroom", "ON");
            }
            else if (id(currentroom) == "Entryway") {
              id(mqtt_client).publish("oh/vacuum/entryway", "ON");
            }
              else if (id(currentroom) == "Bathroom") {
                id(mqtt_client).publish("oh/vacuum/bathroom", "ON");
              }

  - platform: nextion
    internal: true
    name: $device_name Button 1 UP
    id: nsp_b1up
    page_id: 2
    component_id: 3
    on_release:
      then:
        - lambda: |-
            int a = 0;
            int b = 0;
            int n = id(ceilingmax);
            if (n % 10) { //does not end with 0
              // Smaller multiple for DOWN button
              a = (n / 10) * 10;
              // Larger multiple for UP button
              b = a + 10;
              
            }
            else {
              b = n + 10;
            }
            if (b <= 100) {
            
              if (id(currentroom) == "Kitchen") {
                if (id(oh_kitchen_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/ceiling", esphome::to_string(b));
                }
                if (id(oh_kitchen_table).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/table", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Livingroom") {
                
              }
              else if (id(currentroom) == "Bedroom") {
                if (id(oh_bedroom_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/ceiling", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Entryway") {
                if (id(oh_entryway_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/entryway/ceiling", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Bathroom") {
                if (id(oh_bathroom_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/bathroom/ceiling", esphome::to_string(b));
                }
              }
            }
            else {
              //Light is 100 can't increase.
            }
            
  - platform: nextion
    internal: true
    name: $device_name Button 1 DOWN
    id: nsp_b1down
    page_id: 2
    component_id: 5
    on_release:
      then:
        - lambda: |-
            int a = 0;
            int b = 0;
            int n = id(ceilingmax);
            
            if (n > 5 and n <= 10) {
              a = 5;
            }
            
            else if (n % 10) { //does not end with 0
              // Smaller multiple for DOWN button
              a = (n / 10) * 10;
              // Larger multiple for UP button
              b = a + 10;

              
            }
            else {
              a = n - 10;
            }
            if (a >= 5) {
            
              if (id(currentroom) == "Kitchen") {
                if (id(oh_kitchen_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/ceiling", esphome::to_string(a));
                }
                if (id(oh_kitchen_table).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/table", esphome::to_string(a));
                }
              }
              else if (id(currentroom) == "Livingroom") {
                
              }
              else if (id(currentroom) == "Bedroom") {
                if (id(oh_bedroom_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/ceiling", esphome::to_string(a));
                }
              }
              else if (id(currentroom) == "Entryway") {
                if (id(oh_entryway_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/entryway/ceiling", esphome::to_string(a));
                }
              }
              else if (id(currentroom) == "Bathroom") {
                if (id(oh_bathroom_ceiling).state >= 1) { 
                  id(mqtt_client).publish("oh/bathroom/ceiling", esphome::to_string(a));
                }
              }
            }
            else {
              //Below 5. Don't decrease more.
            }

  - platform: nextion
    internal: true
    name: $device_name Button 2 UP
    id: nsp_b2up
    page_id: 2
    component_id: 4
    on_release:
      then:
        - lambda: |-
            int a = 0;
            int b = 0;
            int n = id(tablemax);
            if (n % 10) { //does not end with 0
              // Smaller multiple for DOWN button
              a = (n / 10) * 10;
              // Larger multiple for UP button
              b = a + 10;
              
            }
            else {
              b = n + 10;
            }
            if (b <= 100) {
            
              if (id(currentroom) == "Kitchen") {
                if (id(oh_kitchen_ledstrip).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/ledstrip", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Livingroom") {
                if (id(oh_livingroom_lady).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/lady", esphome::to_string(b));
                }
                if (id(oh_livingroom_window).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/window", esphome::to_string(b));
                }
                if (id(oh_livingroom_globe).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/globe", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Bedroom") {
                if (id(oh_bedroom_ledstrip).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/ledstrip", esphome::to_string(b));
                }
                if (id(oh_bedroom_window).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/window", esphome::to_string(b));
                }
                if (id(oh_bedroom_moon).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/moon", esphome::to_string(b));
                }
                if (id(oh_bedroom_mirror).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/mirror", esphome::to_string(b));
                }
              }
              else if (id(currentroom) == "Entryway") {
                
              }
              else if (id(currentroom) == "Bathroom") {
                if (id(oh_bathroom_mirror).state >= 1) { 
                  id(mqtt_client).publish("oh/bathroom/mirror", esphome::to_string(b));
                }
              }
            }
            else {
              //Light is 100 can't increase.
            }
            
  - platform: nextion
    internal: true
    name: $device_name Button 2 DOWN
    id: nsp_b2down
    page_id: 2
    component_id: 6
    on_release:
      then:
        - lambda: |-
            int a = 0;
            int b = 0;
            int n = id(tablemax);
            
            if (n > 5 and n <= 10) {
              a = 5;
            }
            else if (n % 10) { //does not end with 0
              // Smaller multiple for DOWN button
              a = (n / 10) * 10;
              // Larger multiple for UP button
              b = a + 10;

              
            }
            else {
              a = n - 10;
            }
            if (a >= 5) {
            
              if (id(currentroom) == "Kitchen") {
                if (id(oh_kitchen_ledstrip).state >= 1) { 
                  id(mqtt_client).publish("oh/kitchen/ledstrip", esphome::to_string(a));
                }
              }
              if (id(currentroom) == "Livingroom") {
                if (id(oh_livingroom_lady).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/lady", esphome::to_string(a));
                }
                if (id(oh_livingroom_window).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/window", esphome::to_string(a));
                }
                if (id(oh_livingroom_globe).state >= 1) { 
                  id(mqtt_client).publish("oh/livingroom/globe", esphome::to_string(a));
                }
              }
              else if (id(currentroom) == "Bedroom") {
                if (id(oh_bedroom_ledstrip).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/ledstrip", esphome::to_string(a));
                }
                if (id(oh_bedroom_window).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/window", esphome::to_string(a));
                }
                if (id(oh_bedroom_moon).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/moon", esphome::to_string(a));
                }
                if (id(oh_bedroom_mirror).state >= 1) { 
                  id(mqtt_client).publish("oh/bedroom/mirror", esphome::to_string(a));
                }
              }
              else if (id(currentroom) == "Entryway") {
                
              }
              else if (id(currentroom) == "Bathroom") {
                if (id(oh_bathroom_mirror).state >= 1) { 
                  id(mqtt_client).publish("oh/bathroom/mirror", esphome::to_string(a));
                }
              }
            }
            else {
              //Below 5. Don't decrease more.
            }

  - platform: nextion
    internal: true
    name: $device_name Button 3 UP
    id: nsp_b3up
    page_id: 2
    component_id: 17
    on_release:
      then:
        - lambda: |-
            if (id(mode) == "All Lights") {

              int a = 0;
              int b = 0;
              int n = id(oh_all_brightness).state;
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                b = n + 10;
              }
              if (b <= 100) {
                if (id(oh_all_brightness).state >= 1) { 
                  id(mqtt_client).publish("oh/all_brightness", esphome::to_string(b));
                }
                
              }
              else {
                //Light is 100 can't increase.
              }
            }
            else if (id(mode) == "Sound") {
              
              int a = 0;
              int b = 0;
              int n = 0;
              if (id(currentroom) == "Kitchen") {
                n = id(oh_kitchen_speaker_volume).state;
              }
              else if (id(currentroom) == "Livingroom") {
                n = id(oh_livingroom_speaker_volume).state;
              }
              else if (id(currentroom) == "Bedroom") {
                n = id(oh_bedroom_speaker_volume).state;
              }
              else if (id(currentroom) == "Entryway") {
                n = id(oh_entryway_speaker_volume).state;
              }
              else if (id(currentroom) == "Bathroom") {
                n = id(oh_bathroom_speaker_volume).state;
              }
              
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                b = n + 10;
              }
              if (b <= 100) {
              
                if (id(currentroom) == "Kitchen") {
                    id(mqtt_client).publish("oh/kitchen/speaker/volume", esphome::to_string(b));
                }
                else if (id(currentroom) == "Livingroom") {
                    id(mqtt_client).publish("oh/livingroom/speaker/volume", esphome::to_string(b));
                }
                else if (id(currentroom) == "Bedroom") {
                    id(mqtt_client).publish("oh/bedroom/speaker/volume", esphome::to_string(b));
                }
                else if (id(currentroom) == "Entryway") {
                    id(mqtt_client).publish("oh/entryway/speaker/volume", esphome::to_string(b));
                }
                else if (id(currentroom) == "Bathroom") {
                    id(mqtt_client).publish("oh/bathroom/speaker/volume", esphome::to_string(b));
                }
              }
              else {
                //Volume is 100 can't increase.
              }
              
            }
            
  - platform: nextion
    internal: true
    name: $device_name Button 3 DOWN
    id: nsp_b3down
    page_id: 2
    component_id: 19
    on_release:
      then:
        - lambda: |-
            if (id(mode) == "All Lights") {
              int a = 0;
              int b = 0;
              int n = id(oh_all_brightness).state;
              
              if (n > 5 and n <= 10) {
              a = 5;
              }
              else if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                a = n - 10;
              }
              if (a >= 5) {
              
                  if (id(oh_all_brightness).state >= 1) { 
                    id(mqtt_client).publish("oh/all_brightness", esphome::to_string(a));
                  }
              }
              else {
                //Below 5. Don't decrease more.
              }
            }
            else if (id(mode) == "Sound") {
              
              int a = 0;
              int b = 0;
              int n = 0;
              if (id(currentroom) == "Kitchen") {
                n = id(oh_kitchen_speaker_volume).state;
              }
              else if (id(currentroom) == "Livingroom") {
                n = id(oh_livingroom_speaker_volume).state;
              }
              else if (id(currentroom) == "Bedroom") {
                n = id(oh_bedroom_speaker_volume).state;
              }
              else if (id(currentroom) == "Entryway") {
                n = id(oh_entryway_speaker_volume).state;
              }
              else if (id(currentroom) == "Bathroom") {
                n = id(oh_bathroom_speaker_volume).state;
              }
              
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                a = n - 10;
              }
              if (a >= 0) {
              
                if (id(currentroom) == "Kitchen") {
                    id(mqtt_client).publish("oh/kitchen/speaker/volume", esphome::to_string(a));
                }
                else if (id(currentroom) == "Livingroom") {
                    id(mqtt_client).publish("oh/livingroom/speaker/volume", esphome::to_string(a));
                }
                else if (id(currentroom) == "Bedroom") {
                    id(mqtt_client).publish("oh/bedroom/speaker/volume", esphome::to_string(a));
                }
                else if (id(currentroom) == "Entryway") {
                    id(mqtt_client).publish("oh/entryway/speaker/volume", esphome::to_string(a));
                }
                else if (id(currentroom) == "Bathroom") {
                    id(mqtt_client).publish("oh/bathroom/speaker/volume", esphome::to_string(a));
                }
              }
              else {
                //Volume is 0 can't decrease.
              }  
            }

            
  - platform: nextion
    internal: true
    name: $device_name Button 4 UP
    id: nsp_b4up
    page_id: 2
    component_id: 18
    on_release:
      then:
        - lambda: |-
            if (id(mode) == "All Lights") {

              int a = 0;
              int b = 0;
              int n = id(oh_all_kelvin).state;
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                b = n + 10;
              }
              if (b <= 100) {
              
                if (id(oh_all_kelvin).state >= 1) { 
                  id(mqtt_client).publish("oh/all_kelvin", esphome::to_string(b));
                }
                
              }
              else {
                //Light is 100 can't increase.
              }
            }
            
            else if (id(mode) == "Sound") {
              int a = 0;
              int b = 0;
              int n = id(soundaverage);
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
                
              }
              else {
                b = n + 10;
              }
              id(soundaverage) = b;
              if (b <= 100) {
                id(disp1).set_component_value("home.n_kelvin", b);
                id(mqtt_client).publish("oh/kitchen/speaker/volume", esphome::to_string(b));
                id(mqtt_client).publish("oh/livingroom/speaker/volume", esphome::to_string(b));
                id(mqtt_client).publish("oh/bedroom/speaker/volume", esphome::to_string(b));
                id(mqtt_client).publish("oh/entryway/speaker/volume", esphome::to_string(b));
                id(mqtt_client).publish("oh/bathroom/speaker/volume", esphome::to_string(b));
              }
              else {
                //Light is 100 can't increase.
              }
 
            }

  - platform: nextion
    internal: true
    name: $device_name Button 4 DOWN
    id: nsp_b4down
    page_id: 2
    component_id: 20
    on_release:
      then:
        - lambda: |-
            if (id(mode) == "All Lights") {

              int a = 0;
              int b = 0;
              int n = id(oh_all_kelvin).state;
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;

                
              }
              else {
                a = n - 10;
              }
              if (a >= 0) {
  
                if (id(oh_all_kelvin).state >= 1) { 
                  id(mqtt_client).publish("oh/all_kelvin", esphome::to_string(a));
                }
                
              }
              else {
                //Light is 0 can't decrease.
              }
            }
            else if (id(mode) == "Sound") {
            
              int a = 0;
              int b = 0;
              int n = id(soundaverage);
              if (n % 10) { //does not end with 0
                // Smaller multiple for DOWN button
                a = (n / 10) * 10;
                // Larger multiple for UP button
                b = a + 10;
  
                  
              }
              else {
                a = n - 10;
              }
              id(soundaverage) = b;

              if (a >= 0) {
    
              id(disp1).set_component_value("home.n_kelvin", a);
              id(mqtt_client).publish("oh/kitchen/speaker/volume", esphome::to_string(a));
              id(mqtt_client).publish("oh/livingroom/speaker/volume", esphome::to_string(a));
              id(mqtt_client).publish("oh/bedroom/speaker/volume", esphome::to_string(a));
              id(mqtt_client).publish("oh/entryway/speaker/volume", esphome::to_string(a));
              id(mqtt_client).publish("oh/bathroom/speaker/volume", esphome::to_string(a));              }
              else {
                //Light is 0 can't decrease.
              }
            }

  - platform: nextion
    internal: true
    name: $device_name Next Room
    id: nsp_nextroom
    page_id: 2
    component_id: 21
    on_release:
      then:
        - lambda: |-
            if (id(currentroom) == "Kitchen") {
              id(disp1).set_component_text("home.room", "Livingroom");
              id(currentroom) = "Livingroom";
              
            }
            else if (id(currentroom) == "Livingroom") {
              id(disp1).set_component_text("home.room", "Bedroom");
              id(currentroom) = "Bedroom";
              
              
            }
            else if (id(currentroom) == "Bedroom") {
              id(disp1).set_component_text("home.room", "Entryway");
              id(currentroom) = "Entryway";
              

              
            }
            else if (id(currentroom) == "Entryway") {
              id(disp1).set_component_text("home.room", "Bathroom");
              id(currentroom) = "Bathroom";
              

              
            }
            else if (id(currentroom) == "Bathroom") {
              id(disp1).set_component_text("home.room", "Kitchen");
              id(currentroom) = "Kitchen";
  
            }
        - script.execute: update_room

  - platform: nextion
    internal: true
    name: $device_name Current Room
    id: nsp_currentroom
    page_id: 2
    component_id: 7
    on_release:
      then:
        - lambda: 'id(disp1).goto_page(id(currentroom).c_str());'
        
#  - platform: nextion
#    internal: true
#    name: $device_name Time
#    id: nsp_time
#    page_id: 2
#    component_id: 9
#    on_release:
#      then:
#        - lambda: 'id(disp1).goto_page("settings");'

  - platform: nextion
    internal: true
    name: $device_name Event Button
    id: event_button
    page_id: 2
    component_id: 26
    on_release:
      then:
        - lambda: |-     
            if (id(event) == "unlock") {
              id(mqtt_client).publish("oh/event", "hide");
              id(mqtt_client).publish("oh/entryway/lock", "OFF");
            }

  - platform: nextion
    internal: true
    name: $device_name Mode
    id: nsp_mode
    page_id: 2
    component_id: 8
    on_release:
      then:
        - lambda: |-
            if (id(mode) == "All Lights") {
              id(disp1).set_component_text("home.mode", "Sound");
              id(mode) = "Sound";
              
            }
            else if (id(mode) == "Sound") {
              id(disp1).set_component_text("home.mode", "All Lights");
              id(mode) = "All Lights";
            }
            
        - script.execute: update_mode        
#                        id(ceilingmax) = max;            
  - platform: nextion
    internal: true
    name: $device_name Ceiling Button
    id: nsp_ceiling
    page_id: 2
    component_id: 1
    on_release:
      then:
        - lambda: |-
            if (id(currentroom) == "Kitchen") {
              if (id(oh_kitchen_ceiling).state >= 1 or id(oh_kitchen_table).state >= 1) { 
                id(mqtt_client).publish("oh/kitchen/ceiling", "0");
                id(mqtt_client).publish("oh/kitchen/table", "0");
              }
              else {
                id(mqtt_client).publish("oh/kitchen/ceiling", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/kitchen/table", esphome::to_string(id(oh_all_brightness).state));
                
              }
            }
            else if (id(currentroom) == "Livingroom") {
             // No ceiling lights
             id(disp1).set_component_value("b_ceiling", 0); 


            }
            else if (id(currentroom) == "Bedroom") {
              if (id(oh_bedroom_ceiling).state >= 1) { 
                id(mqtt_client).publish("oh/bedroom/ceiling", "0");
              }
              else {
                id(mqtt_client).publish("oh/bedroom/ceiling", esphome::to_string(id(oh_all_brightness).state));
              }
              
            }
            else if (id(currentroom) == "Entryway") {
              if (id(oh_entryway_ceiling).state >= 1) { 
                id(mqtt_client).publish("oh/entryway/ceiling", "0");
              }
              else {
                id(mqtt_client).publish("oh/entryway/ceiling", esphome::to_string(id(oh_all_brightness).state));
              }
              
            }
            else if (id(currentroom) == "Bathroom") {
              if (id(oh_bathroom_ceiling).state >= 1) { 
                id(mqtt_client).publish("oh/bathroom/ceiling", "0");
              }
              else {
                id(mqtt_client).publish("oh/bathroom/ceiling", esphome::to_string(id(oh_all_brightness).state));
              }

            }
            
  - platform: nextion
    internal: true
    name: $device_name Table Button
    id: nsp_table
    page_id: 2
    component_id: 2
    on_release:
      then:
        - lambda: |-
            if (id(currentroom) == "Kitchen") {
              if (id(oh_kitchen_ledstrip).state >= 1) { 
                id(mqtt_client).publish("oh/kitchen/ledstrip", "0");
              }
              else {
                id(mqtt_client).publish("oh/kitchen/ledstrip", esphome::to_string(id(oh_all_brightness).state));
              }
            }
            else if (id(currentroom) == "Livingroom") {
              if (id(oh_livingroom_lady).state >= 1 or id(oh_livingroom_window).state >= 1 or id(oh_livingroom_globe).state >= 1) { 
                id(mqtt_client).publish("oh/livingroom/lady", "0");
                id(mqtt_client).publish("oh/livingroom/window", "0");
                id(mqtt_client).publish("oh/livingroom/globe", "0");
              }
              else {
                id(mqtt_client).publish("oh/livingroom/lady", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/livingroom/window", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/livingroom/globe", esphome::to_string(id(oh_all_brightness).state));
              }
            }
            else if (id(currentroom) == "Bedroom") {
              if (id(oh_bedroom_ledstrip).state >= 1 or id(oh_bedroom_window).state >= 1 or id(oh_bedroom_moon).state >= 1 or id(oh_bedroom_mirror).state >= 1) { 
                id(mqtt_client).publish("oh/bedroom/ledstrip", "0");
                id(mqtt_client).publish("oh/bedroom/window", "0");
                id(mqtt_client).publish("oh/bedroom/moon", "0");
                id(mqtt_client).publish("oh/bedroom/mirror", "0");
              }
              else {
                id(mqtt_client).publish("oh/bedroom/ledstrip", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/bedroom/window", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/bedroom/moon", esphome::to_string(id(oh_all_brightness).state));
                id(mqtt_client).publish("oh/bedroom/mirror", "1");
              }
              
            }
            else if (id(currentroom) == "Entryway") {
              //No table lights
              id(disp1).set_component_value("b_table", 0); 

              
            }
            else if (id(currentroom) == "Bathroom") {
              if (id(oh_bathroom_mirror).state >= 1) { 
                id(mqtt_client).publish("oh/bathroom/mirror", "0");
              }
              else {
                id(mqtt_client).publish("oh/bathroom/mirror", esphome::to_string(id(oh_all_brightness).state));
              }

            }
            
  - platform: nextion
    internal: true
    name: $device_name Ceiling Power
    id: ceiling_power
    page_id: 2
    component_id: 24
    on_release:
      then:
        - switch.turn_on: relay_1
        - switch.turn_on: relay_2
        
  - platform: nextion
    internal: true
    name: $device_name Coffee Brew
    id: coffee_brew
    page_id: 9
    component_id: 12
    on_release:
      then:
        - lambda: |-     
              id(mqtt_client).publish("oh/coffee/brew", "1");
              


  - platform: nextion
    internal: true
    name: $device_name K Coffee
    id: nsp_k_coffee
    page_id: 4
    component_id: 6
    on_release:
      then:
        - lambda: |-
            if (id(oh_kitchen_coffee).state == 1) { 
                id(mqtt_client).publish("oh/kitchen/coffee", "0");
              }
            else {
                id(mqtt_client).publish("oh/kitchen/coffee", "1");
            }
  - platform: nextion
    internal: true
    name: $device_name K Egg Boiler
    id: nsp_k_eggs
    page_id: 4
    component_id: 7
    on_release:
      then:
        - lambda: |-
            if (id(oh_kitchen_eggboiler).state == 1) { 
                id(mqtt_client).publish("oh/kitchen/eggboiler", "0");
              }
            else {
                id(mqtt_client).publish("oh/kitchen/eggboiler", "1");
            }

  - platform: nextion
    internal: true
    name: $device_name LR Stereo
    id: nsp_lr_stereo
    page_id: 5
    component_id: 6
    on_release:
      then:
        - lambda: |-
            if (id(oh_livingroom_stereo).state == 1) { 
                id(mqtt_client).publish("oh/livingroom/stereo", "0");
              }
            else {
                id(mqtt_client).publish("oh/livingroom/stereo", "1");
            }
  - platform: nextion
    internal: true
    name: $device_name BR Oldtv
    id: nsp_br_oldtv
    page_id: 6
    component_id: 12
    on_release:
      then:
        - lambda: |-
            if (id(oh_bedroom_oldtv).state == 1) { 
                id(mqtt_client).publish("oh/bedroom/oldtv", "0");
              }
            else {
                id(mqtt_client).publish("oh/bedroom/oldtv", "1");
            }
                                                            
            
  - platform: nextion
    internal: true
    name: $device_name BR Curtain Open
    id: nsp_br_curtain_open
    page_id: 6
    component_id: 5
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("tuya/gardiner/dps/1/command", "open");
                
  - platform: nextion
    internal: true
    name: $device_name BR Curtain Close
    id: nsp_br_curtain_close
    page_id: 6
    component_id: 6
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("tuya/gardiner/dps/1/command", "close");
                
  - platform: nextion
    internal: true
    name: $device_name BR Curtain Stop
    id: nsp_br_curtain_stop
    page_id: 6
    component_id: 10
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("tuya/gardiner/dps/1/command", "stop");
                
  - platform: nextion
    internal: true
    name: $device_name BR Shade Up
    id: nsp_br_shade_up
    page_id: 6
    component_id: 7
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("somfy/0x279621/level/cmd", "100");
                
  - platform: nextion
    internal: true
    name: $device_name BR Shade Down
    id: nsp_br_shade_down
    page_id: 6
    component_id: 8
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("somfy/0x279621/level/cmd", "0");
                
  - platform: nextion
    internal: true
    name: $device_name BR Shade Stop
    id: nsp_br_shade_stop
    page_id: 6
    component_id: 11
    on_release:
      then:
        - lambda: |-
                id(mqtt_client).publish("somfy/0x279621/level/cmd", "STOP");
                


    
sensor:

  - platform: nextion
    internal: true
    nextion_id: disp1
    name: "Variable"
    variable_name: va0
    on_value:
      then:
        - lambda: |-    
            int a = x;
            id(mqtt_client).publish("oh/alarm", esphome::to_string(a));
            
  - platform: nextion
    internal: true
    nextion_id: disp1
    name: "Variable Coffee Cups"
    variable_name: vaCoffee
    on_value:
      then:
        - lambda: |-    
            int a = x;
            id(mqtt_client).publish("oh/coffee/standardcups", esphome::to_string(a));
            

            
    
#  - platform: wifi_signal
#    internal: true
#    name: $device_name WiFi Signal
#    update_interval: 60s

#  - platform: ntc
#    internal: true
#    id: temperature
#    sensor: resistance_sensor
#   calibration:
#      b_constant: 3950
#      reference_temperature: 25°C
#      reference_resistance: 10kOhm
#    name: $device_name Temperature

#  - platform: resistance
#    internal: true
#    id: resistance_sensor
#    sensor: ntc_source
#    configuration: DOWNSTREAM
#   resistor: 11.2kOhm

#  - platform: adc
#    internal: true
#    id: ntc_source
#    pin: 38
#    update_interval: 10s
#    attenuation: 11db

  - platform: mqtt_subscribe
    internal: true
    name: "Openhab All Brightness"
    id: oh_all_brightness
    topic: oh/all_brightness
    on_value:
      then: 
        - lambda: |-
            if (id(mode) == "All Lights") {

              id(disp1).set_component_value("home.n_bright", x);
            }
            else if (id(mode) == "Sound") {
            
            }

            
  - platform: mqtt_subscribe
    internal: true
    name: "Openhab All Kelvin"
    id: oh_all_kelvin
    topic: oh/all_kelvin
    on_value:
      then: 
        - lambda: |-
            if (id(mode) == "All Lights") {

              id(disp1).set_component_value("home.n_kelvin", x);
            }
            else if (id(mode) == "Sound") {
            
            }
            
  - platform: mqtt_subscribe
    internal: true
    name: "Openhab Ready for Coffee"
    id: oh_readyforcoffee
    topic: oh/coffee/readyforcoffee
    on_value:
      then: 
        - lambda: |-
            if (x == 1) {
              id(disp1).set_backlight_brightness(1);
              id(disp1).goto_page("coffee");
            }


  - platform: mqtt_subscribe
    internal: true
    name: "Standard Cups"
    id: oh_standardcups
    topic: oh/coffee/standardcups
    on_value:
      then: 
        - lambda: |-
            if (x == 1) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 0);
              id(disp1).set_component_value("coffee.bt2", 0);
              id(disp1).set_component_value("coffee.bt3", 0);
              id(disp1).set_component_value("coffee.bt4", 0);
              id(disp1).set_component_value("coffee.bt5", 0);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 2) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 0);
              id(disp1).set_component_value("coffee.bt3", 0);
              id(disp1).set_component_value("coffee.bt4", 0);
              id(disp1).set_component_value("coffee.bt5", 0);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 3) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 0);
              id(disp1).set_component_value("coffee.bt4", 0);
              id(disp1).set_component_value("coffee.bt5", 0);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 4) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 1);
              id(disp1).set_component_value("coffee.bt4", 0);
              id(disp1).set_component_value("coffee.bt5", 0);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 5) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 1);
              id(disp1).set_component_value("coffee.bt4", 1);
              id(disp1).set_component_value("coffee.bt5", 0);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 6) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 1);
              id(disp1).set_component_value("coffee.bt4", 1);
              id(disp1).set_component_value("coffee.bt5", 1);
              id(disp1).set_component_value("coffee.bt6", 0);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 7) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 1);
              id(disp1).set_component_value("coffee.bt4", 1);
              id(disp1).set_component_value("coffee.bt5", 1);
              id(disp1).set_component_value("coffee.bt6", 1);
              id(disp1).set_component_value("coffee.bt7", 0);
            }
            else if (x == 8) {
              id(disp1).set_component_value("coffee.bt0", 1);
              id(disp1).set_component_value("coffee.bt1", 1);
              id(disp1).set_component_value("coffee.bt2", 1);
              id(disp1).set_component_value("coffee.bt3", 1);
              id(disp1).set_component_value("coffee.bt4", 1);
              id(disp1).set_component_value("coffee.bt5", 1);
              id(disp1).set_component_value("coffee.bt6", 1);
              id(disp1).set_component_value("coffee.bt7", 1);
            }

  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Ceiling"
    id: oh_kitchen_ceiling
    topic: oh/kitchen/ceiling
    on_value:
      then: 
        - lambda: |-
        
            if (id(currentroom) == id(device).c_str() and (id(relay_1).state == false or id(relay_2).state == false)) {
                //Checking if any of the relays are off and if the light subject to change is connected to one of these relays.
                id(disp1).show_component("b_power");
            }
        
            else if (id(currentroom) == "Kitchen") {
              if (id(oh_kitchen_ceiling).state >= 1 ) { 
                id(disp1).set_component_value("b_ceiling", 1); 
                id(disp1).set_component_value("home.n_ceiling", x);
                id(ceilingmax) = x;

              }
              else {
                if (id(oh_kitchen_ceiling).state == 0 and id(oh_kitchen_table).state == 0) { 
                  id(disp1).set_component_value("b_ceiling", 0); 
                  id(disp1).set_component_value("home.n_ceiling", 0);
                }
              }
            }
    
  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Table"
    id: oh_kitchen_table
    topic: oh/kitchen/table
    on_value:
      then: 
        - lambda: |-
        
            if (id(currentroom) == id(device).c_str() and (id(relay_1).state == false or id(relay_2).state == false)) {
                //Checking if any of the relays are off and if the light subject to change is connected to one of these relays.
                id(disp1).show_component("b_power");
            }
        
            else if (id(currentroom) == "Kitchen") {
              if (id(oh_kitchen_table).state >= 1 ) { 
                id(disp1).set_component_value("b_ceiling", 1); 
                id(disp1).set_component_value("home.n_ceiling", x);
                id(ceilingmax) = x;
              }
              else {
                if (id(oh_kitchen_ceiling).state == 0 and id(oh_kitchen_table).state == 0) { 
                  id(disp1).set_component_value("b_ceiling", 0); 
                  id(disp1).set_component_value("home.n_ceiling", 0);
                }
              }
            }
            
  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Ledstrip"
    id: oh_kitchen_ledstrip
    topic: oh/kitchen/ledstrip
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Kitchen") {
              if (id(oh_kitchen_ledstrip).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_kitchen_ledstrip).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            }

#Livingroom
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom Lady"
    id: oh_livingroom_lady
    topic: oh/livingroom/lady
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Livingroom" ) {
              if (id(oh_livingroom_lady).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_livingroom_lady).state == 0 and id(oh_livingroom_window).state == 0 and id(oh_livingroom_globe).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            }
            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom Window"
    id: oh_livingroom_window
    topic: oh/livingroom/window
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Livingroom" ) {
              if (id(oh_livingroom_window).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_livingroom_lady).state == 0 and id(oh_livingroom_window).state == 0 and id(oh_livingroom_globe).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            }
            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom Globe"
    id: oh_livingroom_globe
    topic: oh/livingroom/globe
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Livingroom" ) {
              if (id(oh_livingroom_globe).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_livingroom_lady).state == 0 and id(oh_livingroom_window).state == 0 and id(oh_livingroom_globe).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            }
#Bedroom

  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Ceiling"
    id: oh_bedroom_ceiling
    topic: oh/bedroom/ceiling
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == id(device).c_str() and (id(relay_1).state == false or id(relay_2).state == false)) {
                //Checking if any of the relays are off and if the light subject to change is connected to one of these relays.
                id(disp1).show_component("b_power");
            }
        
            else if (id(currentroom) == "Bedroom") {
              if (id(oh_bedroom_ceiling).state >= 1 ) { 
                id(disp1).set_component_value("b_ceiling", 1); 
                id(disp1).set_component_value("home.n_ceiling", x);
                id(ceilingmax) = x;

              }
              else {
                if (id(oh_bedroom_ceiling).state == 0) { 
                  id(disp1).set_component_value("b_ceiling", 0); 
                  id(disp1).set_component_value("home.n_ceiling", 0);
                }
              }
            }
            
  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Ledstrip"
    id: oh_bedroom_ledstrip
    topic: oh/bedroom/ledstrip
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bedroom" ) {
              if (id(oh_bedroom_ledstrip).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_bedroom_ledstrip).state == 0 and id(oh_bedroom_window).state == 0 and id(oh_bedroom_moon).state == 0 and id(oh_bedroom_mirror).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            } 

  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Window"
    id: oh_bedroom_window
    topic: oh/bedroom/window
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bedroom" ) {
              if (id(oh_bedroom_window).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_bedroom_ledstrip).state == 0 and id(oh_bedroom_window).state == 0 and id(oh_bedroom_moon).state == 0 and id(oh_bedroom_mirror).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            } 

  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Moon"
    id: oh_bedroom_moon
    topic: oh/bedroom/moon
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bedroom" ) {
              if (id(oh_bedroom_moon).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_bedroom_ledstrip).state == 0 and id(oh_bedroom_window).state == 0 and id(oh_bedroom_moon).state == 0 and id(oh_bedroom_mirror).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            } 

  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Mirror"
    id: oh_bedroom_mirror
    topic: oh/bedroom/mirror
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bedroom" ) {
              if (id(oh_bedroom_mirror).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                // not used on switch id(disp1).set_component_value("home.n_table", x);
                // not used on switch id(tablemax) = x;
              }
              else {
                if (id(oh_bedroom_ledstrip).state == 0 and id(oh_bedroom_window).state == 0 and id(oh_bedroom_moon).state == 0 and id(oh_bedroom_mirror).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            } 

#Entryway

  - platform: mqtt_subscribe
    internal: true
    name: "Entryway Ceiling"
    id: oh_entryway_ceiling
    topic: oh/entryway/ceiling
    on_value:
      then: 
        - lambda: |-
        
            if (id(currentroom) == id(device).c_str() and (id(relay_1).state == false or id(relay_2).state == false)) {
                //Checking if any of the relays are off and if the light subject to change is connected to one of these relays.
                id(disp1).show_component("b_power");
            }
        
            else if (id(currentroom) == "Entryway") {
              if (id(oh_entryway_ceiling).state >= 1 ) { 
                id(disp1).set_component_value("b_ceiling", 1); 
                id(disp1).set_component_value("home.n_ceiling", x);
                id(ceilingmax) = x;

              }
              else {
                if (id(oh_entryway_ceiling).state == 0) { 
                  id(disp1).set_component_value("b_ceiling", 0); 
                  id(disp1).set_component_value("home.n_ceiling", 0);
                }
              }
            }

#Bathroom

  - platform: mqtt_subscribe
    internal: true
    name: "Bathroom Ceiling"
    id: oh_bathroom_ceiling
    topic: oh/bathroom/ceiling
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == id(device).c_str() and (id(relay_1).state == false or id(relay_2).state == false)) {
                //Checking if any of the relays are off and if the light subject to change is connected to one of these relays.
                id(disp1).show_component("b_power");
            }
        
            else if (id(currentroom) == "Bathroom") {
              if (id(oh_bathroom_ceiling).state >= 1 ) { 
                id(disp1).set_component_value("b_ceiling", 1); 
                id(disp1).set_component_value("home.n_ceiling", x);
                id(ceilingmax) = x;

              }
              else {
                if (id(oh_bathroom_ceiling).state == 0) { 
                  id(disp1).set_component_value("b_ceiling", 0); 
                  id(disp1).set_component_value("home.n_ceiling", 0);
                }
              }
            }
  - platform: mqtt_subscribe
    internal: true
    name: "Bathroom Mirror"
    id: oh_bathroom_mirror
    topic: oh/bathroom/mirror
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bathroom") {
              if (id(oh_bathroom_mirror).state >= 1 ) { 
                id(disp1).set_component_value("home.b_table", 1); 
                id(disp1).set_component_value("home.n_table", x);
                id(tablemax) = x;
              }
              else {
                if (id(oh_bathroom_mirror).state == 0) { 
                  id(disp1).set_component_value("home.b_table", 0); 
                  id(disp1).set_component_value("home.n_table", 0);
                }
              }
            }
#Switches
  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Coffee"
    id: oh_kitchen_coffee
    topic: oh/kitchen/coffee
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Kitchen.b_coffee", x);

  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Eggboiler"
    id: oh_kitchen_eggboiler
    topic: oh/kitchen/eggboiler
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Kitchen.b_egg", x);
            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom TV"
    id: oh_livingroom_tv
    topic: oh/livingroom/tv
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Livingroom.b_tv", x);
            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom TV Mute"
    id: oh_livingroom_tv_mute
    topic: oh/livingroom/tv/mute
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Livingroom.b_mute", x);
            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom Stereo"
    id: oh_livingroom_stereo
    topic: oh/livingroom/stereo
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Livingroom.b_stereo", x);
            
  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom OldTV"
    id: oh_bedroom_oldtv
    topic: oh/bedroom/oldtv
    on_value:
      then: 
        - lambda: |-
            id(disp1).set_component_value("Livingroom.b_oldtv", x);

            
#Switches Bedroom

        
#Speakers

  - platform: mqtt_subscribe
    internal: true
    name: "Kitchen Speaker"
    id: oh_kitchen_speaker_volume
    topic: oh/kitchen/speaker/volume
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Kitchen") {

              if (id(mode) == "Sound") {
                id(disp1).set_component_value("home.n_bright", x);
              }
            }
        - script.execute: speaker_average

            
  - platform: mqtt_subscribe
    internal: true
    name: "Livingroom Speaker"
    id: oh_livingroom_speaker_volume
    topic: oh/livingroom/speaker/volume
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Livingroom") {

              if (id(mode) == "Sound") {
                id(disp1).set_component_value("home.n_bright", x);
              }
            }
        - script.execute: speaker_average
            
  - platform: mqtt_subscribe
    internal: true
    name: "Bedroom Speaker"
    id: oh_bedroom_speaker_volume
    topic: oh/bedroom/speaker/volume
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bedroom") {

              if (id(mode) == "Sound") {
                id(disp1).set_component_value("home.n_bright", x);
              }
            }
        - script.execute: speaker_average
            
  - platform: mqtt_subscribe
    internal: true
    name: "Entryway Speaker"
    id: oh_entryway_speaker_volume
    topic: oh/entryway/speaker/volume
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Entryway") {

              if (id(mode) == "Sound") {
                id(disp1).set_component_value("home.n_bright", x);
              }
            }
        - script.execute: speaker_average
            
            
  - platform: mqtt_subscribe
    internal: true
    name: "Bathroom Speaker"
    id: oh_bathroom_speaker_volume
    topic: oh/bathroom/speaker/volume
    on_value:
      then: 
        - lambda: |-
            if (id(currentroom) == "Bathroom") {

              if (id(mode) == "Sound") {
                id(disp1).set_component_value("home.n_bright", x);
              }
            }
        - script.execute: speaker_average

              
  - platform: mqtt_subscribe
    internal: true
    name: "Outside Temperature"
    id: oh_temp
    topic: oh/temp
    on_value:
      then:
        lambda: |-
          id(disp1).set_component_text_printf("t_temp", "%.1f ""\xb0""C", id(oh_temp).state);


text_sensor:
  - platform: mqtt_subscribe
    internal: true
    name: "Event"
    id: oh_event
    topic: oh/event
    on_value:
      then:
        lambda: |-
          if (x == "hide") {
            id(disp1).hide_component("p_event");

          }
          else if (x == "startpage") {
            id(disp1).goto_page("home");
            id(event) = x;
          }
          else if (x == "unlock") {
            id(disp1).goto_page("home");
            id(disp1).show_component("p_event");
            id(event) = x;
          }
          else if (x == "alarm") {
            id(disp1).set_backlight_brightness(1);
            id(disp1).goto_page("alarm");
            id(event) = x;
          }
          
  - platform: nextion
    internal: true
    nextion_id: disp1
    name: "Variable TV"
    id: oh_tvremote
    component_name: vaTV
    on_value:
      then:
        - lambda: |-    
              id(mqtt_client).publish("oh/livingroom/tvremote", x.c_str());

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    internal: true
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
    on_turn_off:
      then:
        lambda: |-
          if (id(currentroom) == id(device).c_str()) {
           id(disp1).show_component("b_power");
          }
    on_turn_on: 
      then:
        lambda: |-
         if (id(relay_1).state == true and id(relay_2).state == true) {
            id(disp1).hide_component("b_power");
          }
      
  - platform: gpio
    internal: true
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19
    on_turn_off:
      then:
       lambda: |-
          if (id(currentroom) == id(device).c_str()) {
            id(disp1).show_component("b_power");
          }
    on_turn_on: 
      then:
        lambda: |-
          if (id(relay_1).state == true and id(relay_2).state == true) {
            id(disp1).hide_component("b_power");
          }

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    internal: true
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

#number:
#  platform: template
#  internal: true
#  name: $device_name Brightness
#  id: brightness
#  entity_category: config
#  unit_of_measurement: '%'
#  min_value: 0
#  max_value: 100
#  step: 1
#  initial_value: 30
#  set_action:
#    then:
#      - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
#output:
#  - platform: ledc
#    id: buzzer_out
#    pin:
#      number: 21

# Enable ringtone music support
#rtttl:
#  id: buzzer
#  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: http://192.168.32.21:8080/hmi.tft
    # A little fun...
    on_setup:
      then:
         - lambda: 'id(disp1).goto_page("bootscreen");'
         - lambda: 'id(disp1).set_component_text("home.room", id(currentroom).c_str());'
         - lambda: 'id(disp1).set_component_text("home.mode", id(mode).c_str());'
